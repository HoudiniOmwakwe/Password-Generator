import random
import string

def generate_password(length=12, use_uppercase=True, use_lowercase=True, use_digits=True, use_special=True):
    """
    Generate a random password based on specified criteria.

    Args:
    length (int): Length of the password. Default is 12.
    use_uppercase (bool): Include uppercase letters. Default is True.
    use_lowercase (bool): Include lowercase letters. Default is True.
    use_digits (bool): Include digits. Default is True.
    use_special (bool): Include special characters. Default is True.

    Returns:
    str: A randomly generated password.

    Raises:
    ValueError: If no character types are selected or if length is less than 1.
    """
    # Define character sets
    chars = ''
    if use_uppercase:
        chars += string.ascii_uppercase
    if use_lowercase:
        chars += string.ascii_lowercase
    if use_digits:
        chars += string.digits
    if use_special:
        chars += string.punctuation

    # Check if at least one character set is selected
    if not chars:
        raise ValueError("At least one character type must be selected.")

    # Check if length is valid
    if length < 1:
        raise ValueError("Password length must be at least 1.")

    # Generate password
    password = ''.join(random.choice(chars) for _ in range(length))
    
    return password

# Example usage
if __name__ == "__main__":
    try:
        # Generate a password with all character types
        password = generate_password()
        print(f"Generated Password: {password}")
        
        # Generate a password with only letters and digits
        password = generate_password(use_special=False)
        print(f"Password without special characters: {password}")
        
        # Generate a password of custom length
        password = generate_password(length=16, use_digits=False)
        print(f"16-character password without digits: {password}")
        
    except ValueError as e:
        print(f"Error: {e}")